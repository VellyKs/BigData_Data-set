# -*- coding: utf-8 -*-
"""data-setBigData.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QxGnzm0kMBLH7O34AsPsDCYSqEosUiTV

# CRIANDO O BANCO COM DADOS DA APi

Para começar, vamos criar o banco de dados "vacinados", utilizando os dados da API do data-set escolhido.

Dataset escolhido: http://dados.recife.pe.gov.br/dataset/perfil-das-pessoas-vacinadas-covid-19/resource/ca7fb968-3a2c-44ff-a2e8-730d1a689407
"""

import requests
import sqlite3
import pandas as pd
import matplotlib.pyplot as plt


def create_vacinados_db():
    # URL da API
    url = f"http://dados.recife.pe.gov.br/api/3/action/datastore_search?&resource_id=ca7fb968-3a2c-44ff-a2e8-730d1a689407&limit=300000"

    # Fazer a requisição à API
    response = requests.get(url)
    data = response.json()

    if 'result' in data and 'records' in data['result']:
        vacinados = data['result']['records']
    else:
        print("Erro: Não foi possível obter os dados da API.")
        return


    # Criar ou conectar ao banco de dados SQLite
    conn = sqlite3.connect('vacinados.db')
    c = conn.cursor()

    # Criar a tabela, se não existir
    c.execute('''
    CREATE TABLE IF NOT EXISTS vacinados (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    faixa_etaria TEXT,
    idade NUMERIC,
    sexo TEXT,
    raca_cor TEXT,
    municipio TEXT,
    grupo TEXT,
    categoria TEXT,
    lote TEXT,
    vacina_fabricante TEXT,
    descricao_dose NUMERIC,
    cnes TEXT,
    sistema_origem TEXT,
    data_vacinacao TIMESTAMP
    );
    ''')



    # Inserir dados no banco de dados
    for vacina in vacinados:
        c.execute('''
        INSERT INTO vacinados (faixa_etaria, idade, sexo, raca_cor, municipio, grupo, categoria, lote, vacina_fabricante, descricao_dose, cnes, sistema_origem, data_vacinacao)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);
        ''', (
            vacina.get('faixa_etaria', ''),
            vacina.get('idade', 0),
            vacina.get('sexo', ''),
            vacina.get('raca_cor', ''),
            vacina.get('municipio', ''),
            vacina.get('grupo', ''),
            vacina.get('categoria', ''),
            vacina.get('lote', ''),
            vacina.get('vacina_fabricante', ''),
            vacina.get('descricao_dose', 0),
            vacina.get('cnes', ''),
            vacina.get('sistema_origem', ''),
            vacina.get('data_vacinacao', '')
        ))

    # Commitar as mudanças e fechar a conexão
    conn.commit()
    conn.close()

# Exemplo de uso chamando a função para criar com todos os registros da API
create_vacinados_db()

"""Agora vamos criar uma nova conexão com o banco de dados para fazermos consultas:"""

connection = sqlite3.connect('vacinados.db')

# Criando uma variavel que recebe todo o valor da leitura
vc = pd.read_sql_query("select * from vacinados;", connection)
pd.read_sql_query("select * from vacinados;", connection)

"""Vamos começar nossa análise exploratória:"""

vc.info()
# um comando que vai dar as informações gerais da nossa base de dados, valores nulos e tipos de dados.

"""Agora outro comando que nos fornece um resumo estatistico do nosso banco:

Contagem (count): número de observações não nulas.

Média (mean): média aritmética dos valores.

Desvio padrão (std): medida de dispersão em torno da média.

Valor mínimo (min): menor valor na variável.

Quartis (25%, 50%, 75%): valores que dividem a distribuição em quartis, representando o primeiro quartil (Q1), mediana (Q2) e terceiro quartil (Q3).

Valor máximo (max): maior valor na variável.
"""

vc.describe()

"""Agora vamos utilizar o comando display para mostrar os 5 primeiros e os 5 últimos dados e também a quantidade de informações que temos:"""

display(vc)

"""Agora para visualizar o periodo da analise:"""

inicio = pd.to_datetime(vc['data_vacinacao']).dt.date.min()
print("Data de inicio", inicio)
fim = pd.to_datetime(vc['data_vacinacao']).dt.date.max()
print("Data final", fim)

"""#  Tratamento de Dados:

Vamos visualizar os dados nulos da tabela:
"""

vazio = vc.isna()
print(vazio.value_counts())

"""Visualizando as estatisticas de idades"""

# visualizando as informações de idade
print(vc['idade'].describe())

minus = vc[vc['municipio'] == '2'].index
print(minus)

vc['municipio'].replace(' ', 'NÃO INFORMADO', inplace=True )
vc['municipio'].replace('2', 'NÃO INFORMADO', inplace=True )
vc['municipio'].replace('3', 'NÃO INFORMADO', inplace=True )
vc['municipio'].replace('4', 'NÃO INFORMADO', inplace=True )
vc['municipio'].replace('5', 'NÃO INFORMADO', inplace=True )

vc['municipio'].unique()

idadeErrada = pd.read_sql("select * from vacinados where idade < 0;", connection)
print(idadeErrada)
# visualizando dados da coluna com idade invalida

"""É possivel perceber que existe uma idade minima de -952, logo invalido precisa ser trocada"""

# lidando com negativos e substituindo por media
neg = vc[vc['idade'] < 0].index
vaz = vc[vc['idade'] == ' '].index
vazi = vc[vc['idade'].isna()]
mediana_idade = vc[vc['idade'] >= 0]['idade'].median()
vc.loc[neg, 'idade'] = mediana_idade
vc.loc[vaz, 'idade'] = mediana_idade


# nenhum dado vazio
print(vc['idade'].describe())

"""Verificando a presença de idades nulas na tabela"""

# verificando os vazios na coluna
vazios = vc[vc['idade'].isna()]
vazios1 = vc[vc['idade'] == ' ']
print(vazios, vazios1)

print(vc.dtypes)

vc['data_vacinacao'] = pd.to_datetime(vc['data_vacinacao'])
print(vc.dtypes)

print("\nDistribuição de raca_cor:\n", vc['raca_cor'].value_counts())

vazios = vc[vc['raca_cor'] == '']
print(vazios['raca_cor'].value_counts())

vc['raca_cor'].fillna('NÃO INFORMADO', inplace=True)

vc['raca_cor'].unique()

vc['raca_cor'].replace('ÍNDIGENA', 'INDÍGENA', inplace=True)

vc['raca_cor'].replace('', 'NÃO INFORMADO', inplace=True)

vc['raca_cor'].unique()

"""# Consultas de dados"""

pd.read_sql("select * from vacinados where idade < 0;", connection)

mediana = vc['idade'].median()
print(mediana)

moda = vc['idade'].mode()[0]
print(moda)

"""Exibição de grafico das vacinas fabricadas por mais usadas"""

vc_vacina = vc.vacina_fabricante.value_counts()
vc_vacina.plot(kind='bar')
plt.xlabel('Nome da vacina')
plt.ylabel('Numero dos vacinados')
plt.show()

conn = sqlite3.connect('vacinados.db')

cursor = conn.cursor()
cursor.execute("SELECT faixa_etaria, COUNT(*) FROM vacinados GROUP BY faixa_etaria order by count(*)")
dados = cursor.fetchall()

# Fechar a conexão com o banco de dados
conn.close()

labels = [registro[0] for registro in dados]
sizes = [registro[1] for registro in dados]


# Criar o gráfico de pizza
plt.figure(figsize=(8, 6))
plt.pie(sizes, labels=labels, autopct='%1.1f%%', shadow=True, startangle=140)
plt.axis('equal')  # Garante que o gráfico de pizza seja desenhado como um círculo
plt.title('Distribuição por Grupo')

# Mostrar o gráfico
plt.show()

total_ocorrencias = sum([ocorrencias for _, ocorrencias in dados])

# Calcular as porcentagens para cada município
faixa_porcentagens = [(faixa_etaria, (ocorrencias / total_ocorrencias) * 100) for faixa_etaria, ocorrencias in dados]

# Mostrar os resultados
for faixa_etaria, porcentagem in faixa_porcentagens:
    print(f"{faixa_etaria}: {porcentagem:f}%")

conn = sqlite3.connect('vacinados.db')

cursor = conn.cursor()
cursor.execute("SELECT municipio, COUNT(*) FROM vacinados where municipio not like '%recife%' GROUP BY municipio ORDER BY COUNT(*) desc limit 10")
dados = cursor.fetchall()

# Fechar a conexão com o banco de dados
conn.close()

labels = [registro[0] for registro in dados]
sizes = [registro[1] for registro in dados]


# Criar o gráfico de pizza
plt.figure(figsize=(8, 6))
plt.pie(sizes, labels=labels, autopct='%1.1f%%', shadow=True, startangle=140)
plt.axis('equal')  # Garante que o gráfico de pizza seja desenhado como um círculo
plt.title('Distribuição por Grupo')

# Mostrar o gráfico
plt.show()

total_ocorrencias = sum([ocorrencias for _, ocorrencias in dados])

# Calcular as porcentagens para cada município
municipios_porcentagens = [(municipio, (ocorrencias / total_ocorrencias) * 100) for municipio, ocorrencias in dados]

# Mostrar os resultados
for municipio, porcentagem in municipios_porcentagens:
    print(f"{municipio}: {porcentagem:.2f}%")

vc_sexo = vc.sexo.value_counts()
vc_sexo.plot(kind='bar')

vc_idade = vc.faixa_etaria.value_counts()
vc_idade.plot(kind='bar')
plt.xlabel('Faixa etária')
plt.ylabel('Vacinados')
plt.show()

def get_vacinados_data():
    conn = sqlite3.connect('vacinados.db')
    query = "SELECT data_vacinacao FROM vacinados"
    df = pd.read_sql_query(query, conn)
    conn.close()
    return df

def print_vacinados_por_mes_ano():
    df = get_vacinados_data()

    # Converter a coluna 'data_vacinacao' para o formato datetime
    df['data_vacinacao'] = pd.to_datetime(df['data_vacinacao'])

    # Extrair o mês e o ano
    df['mes_ano'] = df['data_vacinacao'].dt.to_period('M')

    # Contar o número de vacinados por mês e ano
    vacinados_por_mes_ano = df['mes_ano'].value_counts().sort_index()

    # Imprimir o número de vacinados por mês
    print("Número de Vacinados por Mês e Ano:")
    for mes_ano, num_vacinados in vacinados_por_mes_ano.items():
        print(f"{mes_ano}: {num_vacinados}")

print_vacinados_por_mes_ano()

def get_vacinados_data():
    conn = sqlite3.connect('vacinados.db')
    query = "SELECT vacina_fabricante, descricao_dose, COUNT(*) as total FROM vacinados GROUP BY vacina_fabricante, descricao_dose"
    df = pd.read_sql_query(query, conn)
    conn.close()
    return df

def calcular_porcentagens_doses_por_vacina():
    df = get_vacinados_data()

    # Calcular a porcentagem de cada dose para cada vacina
    df['porcentagem'] = df.groupby('vacina_fabricante')['total'].transform(lambda x: (x / x.sum()) * 100)

    # Exibir as porcentagens
    print("Porcentagem de cada dose para cada vacina:")
    print(df)

calcular_porcentagens_doses_por_vacina()

import sqlite3
import pandas as pd

# Conectar ao banco de dados SQLite
conn = sqlite3.connect('vacinados.db')

# Consulta SQL para obter os dados do banco de dados dentro do período de janeiro a março
sql_query = """
SELECT sexo, COUNT(*) as total
FROM vacinados
WHERE strftime('%m', data_vacinacao) BETWEEN '10' AND '12'
GROUP BY sexo
"""

# Ler os dados do banco de dados para um DataFrame do Pandas
df = pd.read_sql_query(sql_query, conn)

# Calcular a porcentagem de vacinados por sexo
total_vacinados = df['total'].sum()
df['porcentagem'] = (df['total'] / total_vacinados) * 100

# Exibir as porcentagens
print("Porcentagem de vacinados por sexo no período de janeiro a março:")
for index, row in df.iterrows():
    print(f"{row['sexo']}: {row['porcentagem']:.2f}%")

# Fechar a conexão com o banco de dados
conn.close()

vc_grupo = vc.grupo.value_counts().head(10)
vc_grupo.plot(kind='barh', color='skyblue')
plt.xlabel('Grupo')
plt.ylabel('Vacinados')
plt.show()

def get_vacinados_data():
    conn = sqlite3.connect('vacinados.db')
    query = "SELECT data_vacinacao FROM vacinados"
    df = pd.read_sql_query(query, conn)
    conn.close()
    return df
def plot_vacinados_por_mes_ano():
    df = get_vacinados_data()

    # Converter a coluna 'data_vacinacao' para o formato datetime
    df['data_vacinacao'] = pd.to_datetime(df['data_vacinacao'])

    # Extrair o mês e o ano
    df['mes_ano'] = df['data_vacinacao'].dt.to_period('M')

    # Agrupar por mês e ano e calcular a contagem de vacinados
    vacinados_por_mes_ano = df.groupby('mes_ano').size()

    # Plotar o gráfico
    plt.figure(figsize=(10, 6))
    vacinados_por_mes_ano.plot(kind='line', marker='o', linestyle='-')

    # Marcar o mínimo
    minimo = vacinados_por_mes_ano.min()
    plt.axhline(y=minimo, color='r', linestyle='--', label=f'Mínimo: {minimo}')
    plt.legend()

    maximo = vacinados_por_mes_ano.max()
    plt.axhline(y=maximo, color='g', linestyle='--', label=f'Máximo: {maximo}')
    diff = maximo - minimo

    # Adicionar texto indicando a diferença
    texto_diff = f'Diferença do minimo e o maximo: {diff}'
    plt.text(0.5, 0.9, texto_diff, ha='center', va='center', transform=plt.gca().transAxes, fontsize=10, bbox=dict(facecolor='white', alpha=0.5))

    plt.title('Número de Vacinados por Mês e Ano')
    plt.xlabel('Mês e Ano')
    plt.ylabel('Número de Vacinados')
    plt.xticks(rotation=45)
    plt.grid(True)
    plt.tight_layout()
    plt.show()


plot_vacinados_por_mes_ano()